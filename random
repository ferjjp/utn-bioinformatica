#!/usr/bin/perl -w

use strict;
use Bio::DB::GenBank;
use Bio::SeqIO;

my $db = Bio::DB::GenBank->new();

# nuestro gen genera dos variantes transcripcion
# variante 2
# Accession: NM_001281503.2 GI: 1677500628
# variante 1
# Accession: NM_052910.2 GI: 527498300

# bajamos la variante 2 de GenBank
my $seq_obj = $db->get_Seq_by_gi('1677500628');

# ORF minimum length
my $ORF_LENGTH = 75;

# reverse complement the DNA.Key is the id and value is the reversed sequence
my %reversed_sequence = $seq_obj.revcom()

# Key has the DNA ID, value has the array which contains all 6 frames.
my %framed_Sequence = frame(\%forward_sequence, \%reversed_sequence);

# printing the data structure
orf(\%framed_Sequence, $ORF_LENGTH);

sub frame {
	# Author: Fatma Onmus-Leone
	# function: to find the sequence for all 6 frames
	# input: forward and reverse DNA hash
	# return: return hash of DNA with all 6 frames
	my %forward_DNA = %{$_[0]};
	my %reverse_DNA = %{$_[1]};
	my (@allFrames, @reversed_frames, @forward_frames);
	# hash to capture all 6 frames as a value in an array.$framedDNA{sequenceID}=[forward_frame1,forward_frame2,forward_frame3,reverse_sequence1,reverse_sequence2,reverse_sequence3]
	my (%framedDNA);
		# capturing forward frames 
		foreach my $f(keys %forward_DNA) {
			chomp($f); 
			chomp($forward_DNA{$f});
			my $forwardframe_1 = $forward_DNA{$f};
			my $forwardframe_2 = substr($forwardframe_1, 1, length($forwardframe_1));
			my $forwardframe_3 = substr($forwardframe_1, 2, length($forwardframe_1));
			# forward frame 1
			$framedDNA{$f}[0] = $forwardframe_1;
			# forward frame 2
			$framedDNA{$f}[1] = $forwardframe_2;
			# forward frame 3
			$framedDNA{$f}[2] = $forwardframe_3;
		}
		# capturing reverse frames
		foreach my $r(keys %reverse_DNA) {
			chomp($r); 
			chomp($reverse_DNA{$r});
			my $reverseframe_1 = $reverse_DNA{$r};
			my $reverseframe_2 = substr($reverseframe_1, 1, length($reverseframe_1));
			chomp ($reverseframe_2);
			my $reverseframe_3 = substr($reverseframe_1, 2, length($reverseframe_1));
			chomp ($reverseframe_3);
			# reverse frame 1
			$framedDNA{$r}[3] = $reverseframe_1;
			# reverse frame 2
			$framedDNA{$r}[4] = $reverseframe_2;
			# reverse frame 3
			$framedDNA{$r}[5] = $reverseframe_3;
		}

	#Key has the DNA ID, value has the array which contains all 6 frames.e.g $reversed_sequence{sequenceID}=[forward_frame1,forward_frame2,forward_frame3,reverse_sequence1,reverse_sequence2,reverse_sequence3]	
	return %framedDNA;
}

sub codon {
	# Author: Fatma Onmus-Leone
	# input: A string of a sequence
	# function: splits the given sequence into codons.
	# return: an array of a sequence where each element of an array is a codon
	my $d = shift;
	chomp($d);
	my $position = 0;
	my @CODON_DNA;
	my $codonedDNA;
		for (my $count = 0; $count < length($d);) {
			my $codon = substr($d,$position,3);
			push(@CODON_DNA, $codon);
			if(defined $codonedDNA) {
				$codonedDNA = $codonedDNA." ";
				$codonedDNA .= $codon;
			} else {
				$codonedDNA=$codon;
			}
			$count = $count + 3;
			$position = $position + 3;
		}
	return @CODON_DNA;
}

sub orf {
	# Author: Fatma Onmus-Leone
	# input: Takes two variables. A Hash containing sequence id as the key and 6 frames where each frame is an element of the array.A string of orf length.
	# function: Finds the open reading frame and prints out information such as Sequence ID,Frame number,Length of the orf and sequence of the orfs.
	# returns: Doesn't return anything to main. However sends sequence information to Sub codon as a string and takes an array of codons in return.
	my %frames = %{$_[0]};
	my $Size = $_[1];
	my @Codons = "";
	my $frame = 0;
	# sequence length
	my $SSize;
	my $FrameNumber;
	my $sequence;
	# start locations captured here
	my @FramesPos = ();
	my @Orfs = ();
	my $Orf = "";
	my $OrfBegin = 0;
	# individual codon
	my $Codon = "";
	# Codon number within the @Codon
	my $CodonNumber;
	my $j = 0;
	my $Length = 0;
	my $Offset = 0;
	# looping through the hash 
	foreach my $Header(keys %frames) {
	chomp($Header);
		# looping through the frames
		for (my $index = 0; $index < 6; $index++) {
		@Orfs = "";
		$sequence = $frames{$Header}[$index];
		$FrameNumber = $index + 1;
		# retrieved the frame in an array(one codon per array position)
		my @formatDNA = codon($frames{$Header}[$index]);
		$SSize = length($frames{$Header}[$index]);
		my $CodonNumber = 1;
		my $baseNum = 1;
		@FramesPos = "";
		foreach $Codon(@formatDNA) {
		# if codon has start the OrfBegin is set to 1 otherwise it is 0. When OrfBegin is 1 keep concatinating until stop codon is found.
			if($Codon eq "ATG") {
				if($OrfBegin == 1) {
					$Orf = $Orf.$Codon;
				} else {
					push(@FramesPos, $baseNum);
					$Orf = $Codon;
					$OrfBegin = 1;
				}
			# if OrfBegin is 1, which means start found, look for stop. When stop is found set orfbegin to 0 so new search can start. Add the orf to @orfs.
			} elsif($Codon eq "TAA" or $Codon eq "TAG" or $Codon eq "TGA") {
				if($OrfBegin == 1){
					$Orf = $Orf.$Codon;
					push(@Orfs, $Orf);
					$OrfBegin = 0;
				}
			} else {
				if($OrfBegin == 1) {
					$Orf = $Orf.$Codon;
				}
			}
		$CodonNumber++;
		$baseNum = $baseNum + 3;
		}
		my $count = 1;
		# looping through found orf to print out.
		if(scalar @Orfs > 0){
			for($j = 0; $j < scalar @Orfs; $j++) {
				$Length = length($Orfs[$j]);
				if($Length >= $Size) {
					if($FrameNumber == 1) {	
						print "$Header | FRAME = $FrameNumber POS = $FramesPos[$j] LEN = $Length\n" ;
					} elsif($FrameNumber == 2){
						print "$Header | FRAME = $FrameNumber POS = ",($FramesPos[$j]+1)," LEN = $Length\n" ;
					} elsif($FrameNumber == 3){
						print "$Header | FRAME = $FrameNumber POS = ",($FramesPos[$j]+2)," LEN = $Length\n" ;
					} elsif($FrameNumber == 4){
						print "$Header | FRAME = $FrameNumber POS = ",($FramesPos[$j]*-1)," LEN = $Length\n" ;
					} elsif($FrameNumber == 5){
						print "$Header | FRAME = $FrameNumber POS = ",(($FramesPos[$j]+1)*-1)," LEN = $Length\n" ;
					} elsif($FrameNumber == 6){
						print "$Header | FRAME = $FrameNumber POS = ",(($FramesPos[$j]+2)*-1)," LEN = $Length\n" ;
					} else {
					}
					$count = 1;	
					for ($Offset = 0; $Offset < length($Orfs[$j]) ; $Offset += 3) {
						if($count<15) {
							print substr($Orfs[$j], $Offset, 3)." ";
						} else {
							print substr($Orfs[$j], $Offset, 3)."  \n";
							# count for printing 15 codon in a line
							$count = 0;
						}
					$count++;
					}
					print "\n\n";
					}
				}
			}	
		}	
	}
}